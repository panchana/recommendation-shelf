type Query {
  """
  Get a recommendation for a given strategy.
  """
  recommendation(
    store: String!
    strategy: String!
    secondaryStrategy: String
    user: String
    anonymousUser: String
    products: [String]
    categories: [String]
    userNavigationInfo: UserNavigationInfo
    settings: StoreFrontSettings
  ): [ApiBasedRecommendation]
}

input UserNavigationInfo {
  google: Boolean!
  bing: Boolean!
}

input StoreFrontSettings {
  minProducts: Int
  maxProducts: Int
  paidNavigationFilter: PaidNavigationFilter
}

input PaidNavigationFilter {
  filterBingAds: Boolean
  filterGoogleAds: Boolean
  categories: [String]
}

type ApiBasedRecommendation {
  baseIds: [String]
  baseItems: [ProductRecommendation]
  recommendationIds: [String]
  recommendationItems: [ProductRecommendation]
}

type ProductRecommendation {
  productId: String
  score: Float
  offers: [ProductRecommendationOffer]
  specs: [ProductSpec]
}

type ProductRecommendationOffer {
  offerId: String
  originalProductId: String
  sku: String
  distributionCenter: String
  name: String
  description: String
  url: String
  imageUrl: String
  secondaryImageUrl: String
  price: String
  oldPrice: String
  currencySymbol: String
  hasDiscount: Boolean
  discountPercentage: Float
  brand: String
  score: Float
  specs: [ProductSpec]
  categories: [Category]

  """
  Converted from Map[String, String]
  """
  extraInfo: [KeyValue]
  installment: [KeyValue]
  imageUrlMap: [KeyValue]
}

type ProductSpec {
  id: String
  label: String
  type: String
  offerId: String
  subSpecs: [ProductSpec]

  """
  Converted from Map[String, String]
  """
  imagesSsl: [KeyValue]
  images: [KeyValue]
}

type Category {
  name: String
  parent: String
  originalId: String
  ancestors: [String]
}

type KeyValue {
  key: String
  value: String
}
